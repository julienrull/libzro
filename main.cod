; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34435.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	WinMain
PUBLIC	Win32WindowProc
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
Running	DB	01H DUP (?)
	ALIGN	4

BitmapInfo DB	02cH DUP (?)
BitmapMemory DQ	01H DUP (?)
BitmapWidth DD	01H DUP (?)
BitmapHeight DD	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN12
	DD	imagerel $LN12+585
	DD	imagerel $unwind$WinMain
$pdata$RenderWeirdGradient DD imagerel RenderWeirdGradient
	DD	imagerel RenderWeirdGradient+218
	DD	imagerel $unwind$RenderWeirdGradient
$pdata$Win32ResizeDIBSection DD imagerel Win32ResizeDIBSection
	DD	imagerel Win32ResizeDIBSection+198
	DD	imagerel $unwind$Win32ResizeDIBSection
$pdata$Win32UpdateWindow DD imagerel Win32UpdateWindow
	DD	imagerel Win32UpdateWindow+199
	DD	imagerel $unwind$Win32UpdateWindow
$pdata$Win32WindowProc DD imagerel $LN11
	DD	imagerel $LN11+452
	DD	imagerel $unwind$Win32WindowProc
pdata	ENDS
_DATA	SEGMENT
BytesPerPixel DD 04H
	ORG $+4
$SG72847 DB	'GameWindowClass', 00H
$SG72850 DB	'Game', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Win32WindowProc
	DD	024H
	DD	01acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:WinMain
	DD	026H
	DD	0230H
voltbl	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	026011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$RenderWeirdGradient DD 010c01H
	DD	0420cH
$unwind$Win32ResizeDIBSection DD 010c01H
	DD	0620cH
$unwind$Win32UpdateWindow DD 021b01H
	DD	011011bH
$unwind$Win32WindowProc DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\Users\julie\Git\libzro\main.c
_TEXT	SEGMENT
tv64 = 48
H$1 = 52
W$2 = 56
H$3 = 60
W$4 = 64
Y$5 = 68
X$6 = 72
Result$ = 80
DeviceContext$7 = 88
ClientRect$8 = 96
ClientRect$9 = 112
Paint$10 = 128
__$ArrayPad$ = 208
hWnd$ = 240
uMsg$ = 248
wParam$ = 256
lParam$ = 264
Win32WindowProc PROC

; 89   : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 90   :     LRESULT Result = 0;

  0002c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 91   :     switch(uMsg) {

  00035	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR uMsg$[rsp]
  0003c	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 30 02	 cmp	 DWORD PTR tv64[rsp], 2
  00045	74 67		 je	 SHORT $LN5@Win32Windo
  00047	83 7c 24 30 05	 cmp	 DWORD PTR tv64[rsp], 5
  0004c	74 1a		 je	 SHORT $LN4@Win32Windo
  0004e	83 7c 24 30 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00053	74 76		 je	 SHORT $LN8@Win32Windo
  00055	83 7c 24 30 10	 cmp	 DWORD PTR tv64[rsp], 16
  0005a	74 5e		 je	 SHORT $LN6@Win32Windo
  0005c	83 7c 24 30 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00061	74 63		 je	 SHORT $LN7@Win32Windo
  00063	e9 15 01 00 00	 jmp	 $LN9@Win32Windo
$LN4@Win32Windo:

; 92   :         case WM_SIZE:{
; 93   :             RECT ClientRect;
; 94   :             GetClientRect(hWnd,&ClientRect);

  00068	48 8d 54 24 60	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  0006d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 95   :             int W = ClientRect.right -  ClientRect.left;

  0007b	8b 44 24 60	 mov	 eax, DWORD PTR ClientRect$8[rsp]
  0007f	8b 4c 24 68	 mov	 ecx, DWORD PTR ClientRect$8[rsp+8]
  00083	2b c8		 sub	 ecx, eax
  00085	8b c1		 mov	 eax, ecx
  00087	89 44 24 38	 mov	 DWORD PTR W$2[rsp], eax

; 96   :             int H = ClientRect.bottom - ClientRect.top;

  0008b	8b 44 24 64	 mov	 eax, DWORD PTR ClientRect$8[rsp+4]
  0008f	8b 4c 24 6c	 mov	 ecx, DWORD PTR ClientRect$8[rsp+12]
  00093	2b c8		 sub	 ecx, eax
  00095	8b c1		 mov	 eax, ecx
  00097	89 44 24 34	 mov	 DWORD PTR H$1[rsp], eax

; 97   :             Win32ResizeDIBSection(W, H);

  0009b	8b 54 24 34	 mov	 edx, DWORD PTR H$1[rsp]
  0009f	8b 4c 24 38	 mov	 ecx, DWORD PTR W$2[rsp]
  000a3	e8 00 00 00 00	 call	 Win32ResizeDIBSection
  000a8	90		 npad	 1

; 98   :         }break;

  000a9	e9 f9 00 00 00	 jmp	 $LN2@Win32Windo
$LN5@Win32Windo:

; 99   :         case WM_DESTROY:{
; 100  :             Running = false;

  000ae	c6 05 00 00 00
	00 00		 mov	 BYTE PTR Running, 0

; 101  :         }break;

  000b5	e9 ed 00 00 00	 jmp	 $LN2@Win32Windo
$LN6@Win32Windo:

; 102  :         case WM_CLOSE:{
; 103  :             Running = false;

  000ba	c6 05 00 00 00
	00 00		 mov	 BYTE PTR Running, 0

; 104  :         }break;

  000c1	e9 e1 00 00 00	 jmp	 $LN2@Win32Windo
$LN7@Win32Windo:

; 105  :         case WM_ACTIVATEAPP:{
; 106  : 
; 107  :         }break;

  000c6	e9 dc 00 00 00	 jmp	 $LN2@Win32Windo
$LN8@Win32Windo:

; 108  :         case WM_PAINT:{
; 109  :             PAINTSTRUCT Paint;
; 110  :             HDC DeviceContext = BeginPaint(hWnd, &Paint);

  000cb	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  000d3	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  000e1	48 89 44 24 58	 mov	 QWORD PTR DeviceContext$7[rsp], rax

; 111  :             int X = Paint.rcPaint.left;

  000e6	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  000ed	89 44 24 48	 mov	 DWORD PTR X$6[rsp], eax

; 112  :             int Y = Paint.rcPaint.top;

  000f1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  000f8	89 44 24 44	 mov	 DWORD PTR Y$5[rsp], eax

; 113  :             int W = Paint.rcPaint.right - Paint.rcPaint.left;

  000fc	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  00103	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+20]
  0010a	2b c8		 sub	 ecx, eax
  0010c	8b c1		 mov	 eax, ecx
  0010e	89 44 24 40	 mov	 DWORD PTR W$4[rsp], eax

; 114  :             int H = Paint.rcPaint.bottom - Paint.rcPaint.top;

  00112	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  00119	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+24]
  00120	2b c8		 sub	 ecx, eax
  00122	8b c1		 mov	 eax, ecx
  00124	89 44 24 3c	 mov	 DWORD PTR H$3[rsp], eax

; 115  :             RECT ClientRect;
; 116  :             GetClientRect(hWnd,&ClientRect);

  00128	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  0012d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 117  :             Win32UpdateWindow(DeviceContext,&ClientRect, X, Y, W, H);

  0013b	8b 44 24 3c	 mov	 eax, DWORD PTR H$3[rsp]
  0013f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00143	8b 44 24 40	 mov	 eax, DWORD PTR W$4[rsp]
  00147	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0014b	44 8b 4c 24 44	 mov	 r9d, DWORD PTR Y$5[rsp]
  00150	44 8b 44 24 48	 mov	 r8d, DWORD PTR X$6[rsp]
  00155	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  0015a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR DeviceContext$7[rsp]
  0015f	e8 00 00 00 00	 call	 Win32UpdateWindow

; 118  :             EndPaint(hWnd, &Paint);

  00164	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  0016c	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint
  0017a	90		 npad	 1

; 119  :         }break;

  0017b	eb 2a		 jmp	 SHORT $LN2@Win32Windo
$LN9@Win32Windo:

; 120  :         default:{
; 121  :            Result = DefWindowProc(hWnd, uMsg, wParam,lParam); 

  0017d	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  00185	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  0018d	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR uMsg$[rsp]
  00194	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  001a2	48 89 44 24 50	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32Windo:

; 122  :         }break;
; 123  :     }
; 124  :     return(Result);

  001a7	48 8b 44 24 50	 mov	 rax, QWORD PTR Result$[rsp]

; 125  : }

  001ac	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b4	48 33 cc	 xor	 rcx, rsp
  001b7	e8 00 00 00 00	 call	 __security_check_cookie
  001bc	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  001c3	c3		 ret	 0
Win32WindowProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\julie\Git\libzro\main.c
_TEXT	SEGMENT
WindowHeight$ = 112
WindowWidth$ = 116
DeviceContext$ = 144
ClientRect$ = 152
X$ = 160
Y$ = 168
W$ = 176
H$ = 184
Win32UpdateWindow PROC

; 64   : INTERNAL void Win32UpdateWindow(HDC DeviceContext, RECT *ClientRect, int X, int Y, int W, int H) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 65   :     int WindowWidth = ClientRect->right - ClientRect->left;

  0001b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ClientRect$[rsp]
  00023	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ClientRect$[rsp]
  0002b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00030	2b c1		 sub	 eax, ecx
  00032	89 44 24 74	 mov	 DWORD PTR WindowWidth$[rsp], eax

; 66   :     int WindowHeight = ClientRect->bottom - ClientRect->top;

  00036	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ClientRect$[rsp]
  0003e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ClientRect$[rsp]
  00046	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00049	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0004c	2b c1		 sub	 eax, ecx
  0004e	89 44 24 70	 mov	 DWORD PTR WindowHeight$[rsp], eax

; 67   :     StretchDIBits(

  00052	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  0005a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:BitmapInfo
  00069	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0006e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitmapMemory
  00075	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0007a	8b 44 24 70	 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007e	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00082	8b 44 24 74	 mov	 eax, DWORD PTR WindowWidth$[rsp]
  00086	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0008a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00092	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0009a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR BitmapHeight
  000a0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a4	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR BitmapWidth
  000ab	45 33 c0	 xor	 r8d, r8d
  000ae	33 d2		 xor	 edx, edx
  000b0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits
  000be	90		 npad	 1

; 68   :         DeviceContext,
; 69   :         /*
; 70   :         X, Y, W, H,
; 71   :         X, Y, W, H,
; 72   :         */
; 73   :         0, 0, BitmapWidth, BitmapHeight,
; 74   :         0, 0, WindowWidth, WindowHeight,
; 75   :         BitmapMemory,
; 76   :         &BitmapInfo,
; 77   :         DIB_RGB_COLORS, 
; 78   :         SRCCOPY
; 79   :     );
; 80   : }

  000bf	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000c6	c3		 ret	 0
Win32UpdateWindow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\julie\Git\libzro\main.c
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Width$ = 64
Height$ = 72
Win32ResizeDIBSection PROC

; 45   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 46   :     if(BitmapMemory)

  0000c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR BitmapMemory, 0
  00014	74 16		 je	 SHORT $LN2@Win32Resiz

; 47   :     {
; 48   :         VirtualFree(BitmapMemory, 0, MEM_RELEASE);

  00016	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR BitmapMemory
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
  0002b	90		 npad	 1
$LN2@Win32Resiz:

; 49   :     }
; 50   : 
; 51   :     BitmapWidth = Width;

  0002c	8b 44 24 40	 mov	 eax, DWORD PTR Width$[rsp]
  00030	89 05 00 00 00
	00		 mov	 DWORD PTR BitmapWidth, eax

; 52   :     BitmapHeight = Height;

  00036	8b 44 24 48	 mov	 eax, DWORD PTR Height$[rsp]
  0003a	89 05 00 00 00
	00		 mov	 DWORD PTR BitmapHeight, eax

; 53   : 
; 54   :     BitmapInfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);

  00040	c7 05 00 00 00
	00 28 00 00 00	 mov	 DWORD PTR BitmapInfo, 40 ; 00000028H

; 55   :     BitmapInfo.bmiHeader.biWidth = BitmapWidth;

  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR BitmapWidth
  00050	89 05 04 00 00
	00		 mov	 DWORD PTR BitmapInfo+4, eax

; 56   :     BitmapInfo.bmiHeader.biHeight = -BitmapHeight;

  00056	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR BitmapHeight
  0005c	f7 d8		 neg	 eax
  0005e	89 05 08 00 00
	00		 mov	 DWORD PTR BitmapInfo+8, eax

; 57   :     BitmapInfo.bmiHeader.biPlanes = 1;

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	66 89 05 0c 00
	00 00		 mov	 WORD PTR BitmapInfo+12, ax

; 58   :     BitmapInfo.bmiHeader.biBitCount = 32;

  00070	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00075	66 89 05 0e 00
	00 00		 mov	 WORD PTR BitmapInfo+14, ax

; 59   :     BitmapInfo.bmiHeader.biCompression = BI_RGB;

  0007c	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR BitmapInfo+16, 0

; 60   :     int BitmapMemorySize = (BitmapWidth*BitmapHeight)*BytesPerPixel;

  00086	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR BitmapWidth
  0008c	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR BitmapHeight
  00093	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR BytesPerPixel
  0009a	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 61   :     BitmapMemory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT, PAGE_READWRITE);

  0009e	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000a3	41 b9 04 00 00
	00		 mov	 r9d, 4
  000a9	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000af	48 8b d0	 mov	 rdx, rax
  000b2	33 c9		 xor	 ecx, ecx
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR BitmapMemory, rax

; 62   : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
Win32ResizeDIBSection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\julie\Git\libzro\main.c
_TEXT	SEGMENT
Green$1 = 0
Blue$2 = 1
X$3 = 4
Y$4 = 8
Pitch$ = 12
Pixel$5 = 16
Row$ = 24
XOffset$ = 48
YOffset$ = 56
RenderWeirdGradient PROC

; 29   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 30   :     int Pitch = BitmapWidth * BytesPerPixel; 

  0000c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR BitmapWidth
  00012	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR BytesPerPixel
  00019	89 44 24 0c	 mov	 DWORD PTR Pitch$[rsp], eax

; 31   :     u8 *Row = (u8*)BitmapMemory;

  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR BitmapMemory
  00024	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 32   :     for(int Y = 0; Y < BitmapHeight; ++Y) {

  00029	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR Y$4[rsp], 0
  00031	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  00033	8b 44 24 08	 mov	 eax, DWORD PTR Y$4[rsp]
  00037	ff c0		 inc	 eax
  00039	89 44 24 08	 mov	 DWORD PTR Y$4[rsp], eax
$LN4@RenderWeir:
  0003d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR BitmapHeight
  00043	39 44 24 08	 cmp	 DWORD PTR Y$4[rsp], eax
  00047	0f 8d 88 00 00
	00		 jge	 $LN3@RenderWeir

; 33   :         u32 *Pixel = (u32*)Row; 

  0004d	48 8b 44 24 18	 mov	 rax, QWORD PTR Row$[rsp]
  00052	48 89 44 24 10	 mov	 QWORD PTR Pixel$5[rsp], rax

; 34   :         for(int X = 0; X < BitmapWidth; ++X) {

  00057	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR X$3[rsp], 0
  0005f	eb 0a		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  00061	8b 44 24 04	 mov	 eax, DWORD PTR X$3[rsp]
  00065	ff c0		 inc	 eax
  00067	89 44 24 04	 mov	 DWORD PTR X$3[rsp], eax
$LN7@RenderWeir:
  0006b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR BitmapWidth
  00071	39 44 24 04	 cmp	 DWORD PTR X$3[rsp], eax
  00075	7d 44		 jge	 SHORT $LN6@RenderWeir

; 35   :             u8 Blue  = (u8)(X + XOffset);

  00077	8b 44 24 30	 mov	 eax, DWORD PTR XOffset$[rsp]
  0007b	8b 4c 24 04	 mov	 ecx, DWORD PTR X$3[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	88 44 24 01	 mov	 BYTE PTR Blue$2[rsp], al

; 36   :             u8 Green = (u8)(Y + YOffset);

  00087	8b 44 24 38	 mov	 eax, DWORD PTR YOffset$[rsp]
  0008b	8b 4c 24 08	 mov	 ecx, DWORD PTR Y$4[rsp]
  0008f	03 c8		 add	 ecx, eax
  00091	8b c1		 mov	 eax, ecx
  00093	88 04 24	 mov	 BYTE PTR Green$1[rsp], al

; 37   :             *Pixel++ = ((Green << 8) | Blue);

  00096	0f b6 04 24	 movzx	 eax, BYTE PTR Green$1[rsp]
  0009a	c1 e0 08	 shl	 eax, 8
  0009d	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR Blue$2[rsp]
  000a2	0b c1		 or	 eax, ecx
  000a4	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Pixel$5[rsp]
  000a9	89 01		 mov	 DWORD PTR [rcx], eax
  000ab	48 8b 44 24 10	 mov	 rax, QWORD PTR Pixel$5[rsp]
  000b0	48 83 c0 04	 add	 rax, 4
  000b4	48 89 44 24 10	 mov	 QWORD PTR Pixel$5[rsp], rax

; 38   :         }

  000b9	eb a6		 jmp	 SHORT $LN5@RenderWeir
$LN6@RenderWeir:

; 39   :         Row += Pitch;

  000bb	48 63 44 24 0c	 movsxd	 rax, DWORD PTR Pitch$[rsp]
  000c0	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Row$[rsp]
  000c5	48 03 c8	 add	 rcx, rax
  000c8	48 8b c1	 mov	 rax, rcx
  000cb	48 89 44 24 18	 mov	 QWORD PTR Row$[rsp], rax

; 40   :     }

  000d0	e9 5e ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 41   : }

  000d5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d9	c3		 ret	 0
RenderWeirdGradient ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\julie\Git\libzro\main.c
_TEXT	SEGMENT
XOffset$1 = 96
Window$2 = 104
YOffset$3 = 112
WindowHeight$4 = 116
WindowWidth$5 = 120
DeviceContext$6 = 128
WindowClass$ = 144
Message$7 = 224
ClientRect$8 = 272
__$ArrayPad$ = 288
hInstance$ = 320
hPrevInstance$ = 328
lpCmdLine$ = 336
nCmdShow$ = 344
WinMain	PROC

; 133  : {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 134  :     WNDCLASS WindowClass = {0};

  0002e	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00036	48 8b f8	 mov	 rdi, rax
  00039	33 c0		 xor	 eax, eax
  0003b	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00040	f3 aa		 rep stosb

; 135  :     WindowClass.style = CS_OWNDC|CS_HREDRAW|CS_VREDRAW;

  00042	c7 84 24 90 00
	00 00 23 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 35 ; 00000023H

; 136  :     WindowClass.lpfnWndProc = Win32WindowProc;

  0004d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32WindowProc
  00054	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 137  :     WindowClass.hInstance = hInstance;

  0005c	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  00064	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 138  :     // WindowClass.hIcon = ;
; 139  :     WindowClass.lpszClassName = "GameWindowClass";

  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG72847
  00073	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 140  :     if(RegisterClass(&WindowClass)){

  0007b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  00089	0f b7 c0	 movzx	 eax, ax
  0008c	85 c0		 test	 eax, eax
  0008e	0f 84 9a 01 00
	00		 je	 $LN6@WinMain

; 141  :         HWND Window = CreateWindowEx(

  00094	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  0009d	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  000a5	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000aa	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000b3	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000bc	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000c4	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000cc	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000d4	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000dc	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG72850
  000e9	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  000f1	33 c9		 xor	 ecx, ecx
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  000f9	48 89 44 24 68	 mov	 QWORD PTR Window$2[rsp], rax

; 142  :             0,
; 143  :             WindowClass.lpszClassName,
; 144  :             "Game",
; 145  :             WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 146  :             CW_USEDEFAULT,
; 147  :             CW_USEDEFAULT,
; 148  :             CW_USEDEFAULT,
; 149  :             CW_USEDEFAULT,
; 150  :             0,
; 151  :             0,
; 152  :             hInstance,
; 153  :             0    
; 154  :         );
; 155  :         if(Window)

  000fe	48 83 7c 24 68
	00		 cmp	 QWORD PTR Window$2[rsp], 0
  00104	0f 84 24 01 00
	00		 je	 $LN8@WinMain

; 156  :         {
; 157  :             Running = true;

  0010a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR Running, 1

; 158  :             int XOffset = 0;

  00111	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR XOffset$1[rsp], 0

; 159  :             int YOffset = 0;

  00119	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR YOffset$3[rsp], 0
$LN2@WinMain:

; 160  :             while(Running)

  00121	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR Running
  00128	85 c0		 test	 eax, eax
  0012a	0f 84 fe 00 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 161  :             {
; 162  :                 MSG Message;
; 163  :                 while(PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) 

  00130	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00138	45 33 c9	 xor	 r9d, r9d
  0013b	45 33 c0	 xor	 r8d, r8d
  0013e	33 d2		 xor	 edx, edx
  00140	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  0014e	85 c0		 test	 eax, eax
  00150	74 30		 je	 SHORT $LN5@WinMain

; 164  :                 {
; 165  :                     if(Message.message == WM_QUIT) {

  00152	83 bc 24 e8 00
	00 00 12	 cmp	 DWORD PTR Message$7[rsp+8], 18
  0015a	75 07		 jne	 SHORT $LN10@WinMain

; 166  :                         Running = false;

  0015c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR Running, 0
$LN10@WinMain:

; 167  :                     }
; 168  :                     TranslateMessage(&Message);

  00163	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 169  :                     DispatchMessage(&Message);

  00171	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA
  0017f	90		 npad	 1

; 170  :                 }

  00180	eb ae		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 171  : 
; 172  :                 RenderWeirdGradient(XOffset, YOffset);

  00182	8b 54 24 70	 mov	 edx, DWORD PTR YOffset$3[rsp]
  00186	8b 4c 24 60	 mov	 ecx, DWORD PTR XOffset$1[rsp]
  0018a	e8 00 00 00 00	 call	 RenderWeirdGradient

; 173  : 
; 174  :                 HDC DeviceContext = GetDC(Window);

  0018f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$2[rsp]
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  0019a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR DeviceContext$6[rsp], rax

; 175  :                 RECT ClientRect;
; 176  :                 GetClientRect(Window, &ClientRect);

  001a2	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  001aa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$2[rsp]
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 177  :                 int WindowWidth = ClientRect.right - ClientRect.left;

  001b5	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR ClientRect$8[rsp]
  001bc	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR ClientRect$8[rsp+8]
  001c3	2b c8		 sub	 ecx, eax
  001c5	8b c1		 mov	 eax, ecx
  001c7	89 44 24 78	 mov	 DWORD PTR WindowWidth$5[rsp], eax

; 178  :                 int WindowHeight = ClientRect.bottom - ClientRect.top;

  001cb	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR ClientRect$8[rsp+4]
  001d2	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR ClientRect$8[rsp+12]
  001d9	2b c8		 sub	 ecx, eax
  001db	8b c1		 mov	 eax, ecx
  001dd	89 44 24 74	 mov	 DWORD PTR WindowHeight$4[rsp], eax

; 179  :                 Win32UpdateWindow(DeviceContext, &ClientRect, 0, 0, WindowWidth, WindowHeight);

  001e1	8b 44 24 74	 mov	 eax, DWORD PTR WindowHeight$4[rsp]
  001e5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001e9	8b 44 24 78	 mov	 eax, DWORD PTR WindowWidth$5[rsp]
  001ed	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001f1	45 33 c9	 xor	 r9d, r9d
  001f4	45 33 c0	 xor	 r8d, r8d
  001f7	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  001ff	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$6[rsp]
  00207	e8 00 00 00 00	 call	 Win32UpdateWindow

; 180  :                 ReleaseDC(Window, DeviceContext);

  0020c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$6[rsp]
  00214	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$2[rsp]
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 181  :                 ++XOffset;

  0021f	8b 44 24 60	 mov	 eax, DWORD PTR XOffset$1[rsp]
  00223	ff c0		 inc	 eax
  00225	89 44 24 60	 mov	 DWORD PTR XOffset$1[rsp], eax

; 182  :                 //YOffset;
; 183  :             }

  00229	e9 f3 fe ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN8@WinMain:
$LN6@WinMain:

; 184  :         }
; 185  :         else
; 186  :         {
; 187  :             // TODO(julien): logging 
; 188  :         }
; 189  : 
; 190  :     }
; 191  :     else 
; 192  :     {
; 193  :         // TODO(julien): logging 
; 194  :     }
; 195  : 
; 196  :     return 0;

  0022e	33 c0		 xor	 eax, eax

; 197  : }

  00230	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00238	48 33 cc	 xor	 rcx, rsp
  0023b	e8 00 00 00 00	 call	 __security_check_cookie
  00240	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  00247	5f		 pop	 rdi
  00248	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
